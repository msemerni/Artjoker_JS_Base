'use strict';

// 1. Написать регулярное выражение проверки номера телефона по формату +сс(mmm)xxx-xx-xx, Где cc - код страны, mmm - код мобильного оператора, x - номер телефона
// 2. Написать регулярное выражение проверки на email
// 3. Написать регулярное выражение проверку на сайт: http://test.dev
// 4. Написать регулярное выражение проверки пароля, который должен быть минимум 6 символов, максимум 25, 
//    состоять из латинских символов и цифр, может содержать в себе знак подчеркивания
// 5. Проверить строку на валидность ipv4 адреса

// 1. Написать регулярное выражение проверки номера телефона по формату +сс(mmm)xxx-xx-xx, Где cc - код страны, mmm - код мобильного оператора, x - номер телефона
// формат кода страны +сс
/^\+\d{2}\(\d{3}\)\d{3}(-\d{2}){2}$/g.test("+38(066)783-12-15");

// формат кода страны +с, +сc, +сcc, +с-ccc
/^\+\d(\d{0,2}|-\d{3})\(\d{3}\)\d{3}(-\d{2}){2}$/g.test("+38(066)783-12-15");

// 2. Написать регулярное выражение проверки на email

/^\w+([-+.]?\w+)*@\w+([-.]?\w+)*(\.\w{2,6})+$/gi.test("mv@gmail.com");

// /(\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)/gi.test("mv@gmail.com");
// test("qwerty123@mail.com.ua")

// 3. Написать регулярное выражение проверку на сайт: http(s)://test.dev(.dev.dev...)

/^(https?\:\/\/)?([a-z0-9]{1})((\.[a-z0-9-])|([a-z0-9-]))*\.([a-z]{2,6})*/gi.test("http://test.dev");

// 4. Написать регулярное выражение проверки пароля, который должен быть минимум 6 символов, максимум 25, 
//   состоять из латинских символов и цифр, может содержать в себе знак подчеркивания
/^\w{6,25}$/g.test("123456zF_g");

//5. Проверить строку на валидность ipv4 адреса
/^\d{1,3}(\.\d{1,3}){3}$/g.test("192.168.255.255");


//// https://htmlweb.ru/service/email_verification.php
//// # - _ ~! $ & '() * +,; =:


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5
// Клиенты банка, имеют такие характеристики - фио, активный или нет, дата регистрации в банке, счета. 
// Существует два типа счетов: дебетовый и кредитовый. 
// Дебитовый счет имеет текущий баланс либо он положителен либо нулевой. 
// Кредитовый счет имеет два баланса: личные средства, кредитные средства и кредитный лимит. 
// У каждого счета есть активность, дата активности когда заканчивается срок годности пластиковой карты. 
// У каждого счета есть тип валюты, UAH, RUB, USD, GBP, EUR и другие. 
// У пользователя может быть несколько счетов одновременно. 

// Подсчитать общее количество денег внутри банка в долларовом эквиваленте учитывая кредитные лимиты и снятие средств. 
// Посчитать сколько всего денег в долларовом эквиваленте все клиенты должны банку. 
// Посчитать сколько неактивных клиентов должны погасить кредит банку и на какую общую сумму. 
// Аналогично для активных. Для получения актуальных курсов валют использовать API (которое будет предоставлено). 
// Промисы использовать для работы с API в целях отправки запросов на сервер.
// Создать отдельный git-репозиторий для этого проекта и дальше работать с этим проектом в этом репозитории.



class Client {
    constructor() {
      this.firstName = firstName;
      this.lastName = lastName;
      this.patronymicName = patronymicName;
      this.isActive = isActive;
      this.registrationDate = registrationDate;

    }
}

class Account {
    constructor() {
        this.debitAccount = debitAccount;
        this.creditAccount = creditAccount;

    }
}

